install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('digest')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages('rcmdcheck')
install.packages('digest')
install.packages('digest')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
exit
q()
knitr::opts_chunk$set(echo = FALSE)
from <- sprintf("<sendmailR@\\%s>", Sys.info()[4])
to <- "<olafm@datensplitter.net>"
subject <- "Hello from R"
body <- list("It works!", mime_part(iris))
from <- sprintf("<sendmailR@\\%s>", Sys.info()[4])
to <- "politis.laurent@gmail.com"
subject <- "Hello from R"
body <- list("It works!", head(iris))
sendmail(from, to, subject, body,
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
install.packages("sendmail")
install.packages("sendmailR")
sendmail(from, to, subject, body,
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
library(sendmailR)
sendmail(from, to, subject, body,
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
library(mailR)
install.packages("mailR")
send.mail(from = to,
to = to,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 4655),
send = TRUE)
```R
library(mailR)
from <- sprintf("<sendmailR@\\%s>", Sys.info()[4])
to <- "politis.laurent@gmail.com"
subject <- "Hello from R"
body <- list("It works!", head(iris))
send.mail(from = to,
to = to,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 4655),
send = TRUE)
```
library(mailR)
library(mailR)
from <- sprintf("<sendmailR@\\%s>", Sys.info()[4])
to <- "politis.laurent@gmail.com"
subject <- "Hello from R"
body <- list("It works!", head(iris))
send.mail(from = to,
to = to,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 4655),
send = TRUE)
library(mailR)
library(rJava)
library(jsonlite)
library(httr)
httr::GET("http://api.open-notify.org/iss-now.json")
a = httr::GET("http://api.open-notify.org/iss-now.json")
a
a = httr::GET("http://api.open-notify.org/iss-now.json",handle = "text")
a = httr::GET("http://api.open-notify.org/iss-now.json",handle = "json")
a = httr::GET("http://api.open-notify.org/iss-now.json",format="json")
a
jsonlite::fromJSON(a)
a = httr::GET("http://api.open-notify.org/iss-now.json",format="txt")
jsonlite::fromJSON(a)
geturl(a)
httr::accept_json()
a = httr::GET("http://api.open-notify.org/iss-now.json",format="txt")
a
content(a)
class(content(a))
library(readr)
break(10)
sleep(10)
library(readr)
10^2
library(data.table)
library(FeatureHashing)
library(data.table)
library(FeatureHashing)
install.packages("FeatureHashing")
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
install.packages("xgboost")
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
require(randomForest)
require(caret)
require(dplyr)
require(ggplot2)
library(pROC)
install.packages("proc")
install.packages("pROC")
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
require(randomForest)
require(caret)
require(dplyr)
require(ggplot2)
library(pROC)
library(stringr)
library(dummies)
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
require(randomForest)
require(caret)
require(dplyr)
require(ggplot2)
library(pROC)
library(stringr)
library(Metrics)
install.packages("Metrics")
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
require(randomForest)
require(caret)
require(dplyr)
require(ggplot2)
library(pROC)
library(stringr)
library(Metrics)
library(kernlab)
install.packages("kernlab")
install.packages("mlbench")
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
require(randomForest)
require(caret)
require(dplyr)
require(ggplot2)
library(pROC)
library(stringr)
library(Metrics)
library(kernlab)
library(mlbench)
train <- read.csv("Cours2019_M2/data/pricing_house/train.csv", stringsAsFactors=FALSE)
#train <- read.csv("U:/Programming/R/Kaggle/houses/train.csv", stringsAsFactors=FALSE)
#test <- read.csv("U:/Programming/R/Kaggle/houses/test.csv", stringsAsFactors=FALSE)
names(train)
install.packages("corrplot")
library(corrplot)
library(car)
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
require(randomForest)
require(caret)
require(dplyr)
require(ggplot2)
library(pROC)
library(stringr)
library(Metrics)
library(kernlab)
library(mlbench)
library(car)
install.packages("car")
library(data.table)
library(FeatureHashing)
library(Matrix)
library(xgboost)
require(randomForest)
require(caret)
require(dplyr)
require(ggplot2)
library(pROC)
library(stringr)
library(Metrics)
library(kernlab)
library(mlbench)
library(car)
# Load Packages
library(MASS)
library(Metrics)
library(corrplot)
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
# Load Packages
library(MASS)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
install.packages("lars")
# Load Packages
library(MASS)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
library(xgboost)
library(Matrix)
library(methods)
library(caret)
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
# Load Packages
library(MASS)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
library(xgboost)
library(Matrix)
library(methods)
library(caret)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# Load Packages
library(MASS)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
# Load Packages
library(MASS)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
install.packages("rlang")
# Load Packages
library(MASS)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
library(xgboost)
library(Matrix)
library(methods)
library(caret)
# Read Data
Training <- read.csv("data/pricing_")
# Read Data
Training <- read.csv("data/pricing_house/train.csv")
Test <- read.csv("data/pricing_house/")
# Read Data
Training <- read.csv("data/pricing_house/train.csv")
Test <- read.csv("data/pricing_house/test.csv")
# Test whether data is successfully loaded
names(Training)
library(ggplot2)
df = data.frame(x=rnorm(1:84),y=rnorm(1:84),
lettres=LETTERS[rep(seq( from = 1, to = 28 ),3)])
df[!complete.cases(df),"lettres"]="A"
df$test= ifelse(df$lettres=="A","A","pas A")
ggplot(df,aes(x=x,y=y))+geom_text(aes(label=lettres))
install.packages("ggplot2")
library(ggplot2)
library("ggplot2", lib.loc="~/R/win-library/3.5")
ggplot(df,aes(x=x,y=y,colour=test,size=test))+geom_text(aes(label=lettres))+labs(colour="",size="")+scale_color_manual(values = c("red","black"))+scale_size_manual(values = c(6.5,4))
?geom_contour()
??geom_
ggplot2::qplot(x=1:10,2:11)
detach("package:ggplot2", unload=TRUE)
ggplot2::qplot(x=1:10,2:11)
a=1+2
a
class(a)
as.integer(a)
class(a)
length(a)
a=1:1000
class(a)
a
class(a)
a[1]
a[1:10]
names(a)= 1:1000
a["1"]
names(a)[1] = "test"
a["test"]
names(a["test"])
mat <- matrix(ncol=3,nrow = 4)
mat
mat <- matrix(data = 1,ncol=3,nrow = 4)
mat
mat <- matrix(data = "1",ncol=3,nrow = 4)
mat
class(mat)
View(mat)
View(mat)
View(mat)
?rbind
mat = rbind(mat,mat)
View(mat)
list(mat = mat, a = a)
list_a = list(mat = mat, a = a)
list_a = list(mat = mat, a = a, plot = qplot(1:10,1:10))
list_a = list(mat = mat, a = a, plot = ggplot2::qplot(1:10,1:10))
list_a$plot
list_a$plot
list_a[[1]]
list_a[[2]]
list_a[[3]]
is.numeric(a)
hello <- function(texte=NULL){   # argument ou données d'entrées
#code manipulant les données d'entrée
return(texte)  #  return  renvoie le résultat de la fonction
}
source('~/R/premier_code.R', encoding = 'UTF-8', echo=TRUE)
source("../premier_code.R")
hello(texte = "lolo")
hello(texte = "premier code")
hello(texte = "premier function")
?Sys.getenv()
Sys.getenv("USERNAME")
hello <- function(texte=NULL){   # argument ou données d'entrées
#code manipulant les données d'entrée
nom <-Sys.getenv("USERNAME")
texte = paste(texte,nom)
return(texte)  #  return  renvoie le résultat de la fonction
}
source('~/R/premier_code.R', encoding = 'UTF-8', echo=TRUE)
hello("hello")
ls()
factorielle <-1
for (i in seq(1, 10)) {
factorielle <- factorielle*i
}
seq
?seq
factorielle
factorielle <-1
for (i in seq(from = 1, to = 10,by = 1)) {
print(i)
print(factorielle)
factorielle <- factorielle*i
}
source('~/R/facto.R', echo=TRUE)
View(factorielle)
View(factorielle)
factorielle(n=10)
factorielle(n=10)
source('~/R/facto.R', echo=TRUE)
factorielle(n=10)
m = factorielle(n=10)
m
source('~/R/facto.R', echo=TRUE)
m = factorielle(n=10)
m = factorielle(n=100)
source('~/R/facto.R', echo=TRUE)
source('~/R/facto.R', echo=TRUE)
m = factorielle(n=100)
m
m = factorielle()
m
source('~/R/facto.R', echo=TRUE)
source('~/R/facto.R', echo=TRUE)
m = factorielle()
source('~/R/facto.R', echo=TRUE)
m = factorielle()
m = factorielle()
ls()
m = factorielle_test()
source('~/R/facto.R', echo=TRUE)
vec_x = seq(from=0, to =25,by=0.1)
for (j in vec_x) {
vec_y[j]  <- factorielle(j)
}
vec_j = seq(from=0, to =25,by=0.1)
vec_y = seq(from=0, to =25,by=0.1)
vec_y = seq(from=0, to =25,by=0.1)
## calcul vec_y
i = 0
for (j in vec_x) {
i = i+1
vec_y[j]  <- factorielle(j)
}
for (j in vec_x) {
i = i+1
vec_y[i]  <- factorielle(j)
}
factorielle <- function(n=NULL){
if(!is.numeric(n)){
print("ajouter un chiffre svp ")
}else{
output <-1
vec <- seq(from = 1, to =n,by = 1)
for (i in vec) {
# print(i)
# print(output)
output <- output*i
}
return(output)
}
}
factorielle(10)
factorielle(0.1)
source('~/R/facto.R', echo=TRUE)
vec_y
source('~/R/facto.R', echo=TRUE)
vec_y
source('~/R/facto.R', echo=TRUE)
vec_y
source('~/R/facto.R', echo=TRUE)
?ggplot2
df_facto <- data.frame(n= vec_x,facto = vec_y )
library(ggplot2)
ggplot(data = df_facto) + geom_point(aes(x = n,y =facto))
ggplot(data = df_facto) + geom_point(aes(x = n,y =facto))+scale_y_log10(
)
ggplot(data = df_facto) + geom_point(aes(x = n,y =facto))+
scale_y_log10+ geom_smooth(aes(x=n,y=facto))
ggplot(data = df_facto) + geom_point(aes(x = n,y =facto))+
scale_y_log10()+ geom_smooth(aes(x=n,y=facto))
df_facto <- data.frame(x= vec_x,y= vec_y )
ggplot(data = df_facto) + geom_point(aes(x = n,y =facto))+
scale_y_log10+ geom_smooth(aes(x=n,y=facto))
ggplot(data = df_facto) + geom_point(aes(x = n,y =facto))+
scale_y_log10()+ geom_smooth(aes(x=n,y=facto))
ggplot(data = df_facto) + geom_point(aes(x = x,y =y))+
scale_y_log10()+ geom_smooth(aes(x=x,y=y))
df_facto <- data.frame(vec_x, vec_y )
head(df_facto)
?cars
df_facto <- data.frame(vec_x, vec_y )
?cars
ggplot(cars) + geom_point(aes(x=speed,y=dist,size = speed))
cars$lm = predict(cars,object = lm(cars,speed~size))
model = lm(cars,speed~size)
model = lm(cars,formula = speed~size)
model = lm(cars,formula = dist~speed)
cars$lm = predict(cars,object = model)
model = lm(cars,formula = speed~size)
model
summary(model)
cars$lm = predict(data= cars, model)
ggplot(cars) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))
ggplot(cars) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))+
geom_smooth()
ggplot(cars) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))+
geom_smooth(aes(x=speed,y=dist))
ggplot(cars) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))+
geom_smooth(aes(x=speed,y=dist),method="lm")
ggplot(cars[cars$lm<30,]) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))+
geom_smooth(aes(x=speed,y=dist),method="lm")
ggplot(cars[cars$lm<40,]) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))+
geom_smooth(aes(x=speed,y=dist),method="lm")
ggplot(cars[cars$lm<35,]) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))+
geom_smooth(aes(x=speed,y=dist),method="lm")
ggplot(cars) + geom_point(aes(x=speed,y=dist,size = abs(lm-dist)))+
geom_smooth(aes(x=speed,y=dist),method="lm")
View(mat)
View(cars)
cars = cars[-50,]
